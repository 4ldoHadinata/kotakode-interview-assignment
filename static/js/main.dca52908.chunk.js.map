{"version":3,"sources":["TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoList","tasks","editTask","deleteTask","selectedTask","cancelEdit","confirmEdit","editedItem","setEditedItem","handleOnDragEnd","onDragEnd","droppableId","provided","className","droppableProps","ref","innerRef","map","task","index","key","draggableId","toString","draggableProps","dragHandleProps","onClick","value","onChange","e","target","placeholder","App","useState","setSelectedTask","newTask","setNewTask","setTasks","alert","console","log","indexDelete","filter","val","indexItem","indexEdit","result","destination","items","splice","source","reorderedItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+PAGe,SAASA,EAAT,GAAuI,IAAnHC,EAAkH,EAAlHA,MAAOC,EAA2G,EAA3GA,SAAUC,EAAiG,EAAjGA,WAAYC,EAAqF,EAArFA,aAAcC,EAAuE,EAAvEA,WAAYC,EAA2D,EAA3DA,YAAaC,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,gBAChI,OACE,kBAAC,IAAD,CAAiBC,UAAWD,GAC1B,kBAAC,IAAD,CAAWE,YAAY,aACpB,SAACC,GAAD,OACC,sCAAIC,UAAU,YAAeD,EAASE,eAAtC,CAAsDC,IAAKH,EAASI,WAEhEf,EAAMgB,KAAI,SAACC,EAAMC,GAAP,OACR,kBAAC,IAAD,CAAWC,IAAKD,EAAOE,YAAaF,EAAMG,WAAYH,MAAOA,IAC1D,SAACP,GAAD,OACC,sCAAIG,IAAKH,EAASI,UAAcJ,EAASW,eAAoBX,EAASY,iBACnEL,IAAUf,EAEP,oCACGc,EACD,6BACE,4BAAQL,UAAU,aAAaY,QAAS,kBAAMvB,EAASiB,KAAvD,QACA,4BAAQN,UAAU,YAAYY,QAAS,kBAAMtB,EAAWgB,KAAxD,WAKJ,oCACE,2BAAOO,MAAOnB,EAAYoB,SAAU,SAAAC,GAAC,OAAIpB,EAAcoB,EAAEC,OAAOH,QAAQI,YAAY,KACpF,6BACE,4BAAQjB,UAAU,gBAAgBY,QAAS,kBAAMnB,EAAYa,KAA7D,QACA,4BAAQN,UAAU,YAAYY,QAASpB,GAAvC,wBCmCf0B,MA5Df,WACE,MAAwCC,mBAAS,IAAjD,mBAAO5B,EAAP,KAAqB6B,EAArB,KACA,EAAoCD,mBAAS,IAA7C,mBAAOzB,EAAP,KAAmBC,EAAnB,KACA,EAA8BwB,mBAAS,IAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA0BH,mBAAS,CACjC,YACA,eAFF,mBAAO/B,EAAP,KAAcmC,EAAd,KA8CA,OACE,yBAAKvB,UAAU,OACb,oEACA,2BAAOa,MAAOQ,EAASP,SAAU,SAAAC,GAAC,OAAIO,EAAWP,EAAEC,OAAOH,QAAQI,YAAY,oBAC9E,4BAAQL,QA7CI,WACVS,GACFE,EAAS,GAAD,mBAAKnC,GAAL,CAAYiC,KACpBC,EAAW,KAEXE,MAAM,8BAwCoBxB,UAAU,gBAApC,UACA,kBAACb,EAAD,CAAUC,MAAOA,EAAOC,SAjCX,SAACiB,GAChBc,EAAgBd,GAChBX,EAAcP,EAAMkB,IACpBmB,QAAQC,IAAIpB,IA8BkChB,WArC7B,SAACqC,GAClBJ,EAASnC,EAAMwC,QAAO,SAACC,EAAKC,GAAN,OAAoBH,IAAgBG,OAoCYvC,aAAcA,EAAcC,WAjBjF,WACjB4B,EAAgB,KAgB0G3B,YA3BxG,SAACsC,GACfrC,GACF6B,EAASnC,EAAMgB,KAAI,SAACyB,EAAKC,GAAN,OAAoBA,IAAcC,EAAYrC,EAAamC,MAC9ET,EAAgB,KAEhBI,MAAM,8BAsB4I9B,WAAYA,EAAYC,cAAeA,EAAeC,gBAbpL,SAACoC,GACvB,GAAKA,EAAOC,YAAZ,CACA,IAAMC,EAAK,YAAO9C,GAClB,EAAwB8C,EAAMC,OAAOH,EAAOI,OAAO9B,MAAO,GAAnD+B,EAAP,oBACAH,EAAMC,OAAOH,EAAOC,YAAY3B,MAAO,EAAG+B,GAC1Cd,EAASW,SCvCOI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.dca52908.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nexport default function TodoList({ tasks, editTask, deleteTask, selectedTask, cancelEdit, confirmEdit, editedItem, setEditedItem, handleOnDragEnd }) {\r\n  return (\r\n    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n      <Droppable droppableId=\"todoList\">\r\n        {(provided) => (\r\n          <ul className=\"todoList\" {...provided.droppableProps} ref={provided.innerRef}>\r\n            {\r\n              tasks.map((task, index) => (\r\n                <Draggable key={index} draggableId={index.toString()} index={index}>\r\n                  {(provided) => (\r\n                    <li ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                      {index !== selectedTask ? \r\n                        (\r\n                          <>\r\n                            {task} \r\n                            <div>\r\n                              <button className=\"buttonEdit\" onClick={() => editTask(index)}>Edit</button>\r\n                              <button className=\"buttonRed\" onClick={() => deleteTask(index)}>Hapus</button>\r\n                            </div>\r\n                          </> \r\n                        )\r\n                        : (\r\n                          <>\r\n                            <input value={editedItem} onChange={e => setEditedItem(e.target.value)} placeholder=\"\" />\r\n                            <div>\r\n                              <button className=\"buttonConfirm\" onClick={() => confirmEdit(index)}>Edit</button>\r\n                              <button className=\"buttonRed\" onClick={cancelEdit}>Cancel</button>\r\n                            </div>\r\n                          </>\r\n                        )\r\n                      }\r\n                    </li>\r\n                  )}\r\n                </Draggable>\r\n              ))\r\n            }\r\n          </ul>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\n\r\nfunction App() {\r\n  const [selectedTask, setSelectedTask] = useState(\"\");\r\n  const [editedItem, setEditedItem] = useState(\"\");\r\n  const [newTask, setNewTask] = useState(\"\");\r\n  const [tasks, setTasks] = useState([\r\n    \"Cuci Baju\",\r\n    \"Masak Nasi\"\r\n  ]);\r\n\r\n  const addTask = () => {\r\n    if (newTask) {\r\n      setTasks([...tasks, newTask]);\r\n      setNewTask(\"\");\r\n    } else {\r\n      alert('Isi task terlebih dahulu!');\r\n    }\r\n  }\r\n\r\n  const deleteTask = (indexDelete) => {\r\n    setTasks(tasks.filter((val, indexItem) => indexDelete !== indexItem));\r\n  }\r\n\r\n  const editTask = (index) => {\r\n    setSelectedTask(index);\r\n    setEditedItem(tasks[index])\r\n    console.log(index);\r\n  }\r\n\r\n  const confirmEdit = (indexEdit) => {\r\n    if (editedItem) {\r\n      setTasks(tasks.map((val, indexItem) => indexItem === indexEdit ? editedItem : val));\r\n      setSelectedTask(\"\");\r\n    } else {\r\n      alert('Isi task terlebih dahulu!');\r\n    }\r\n\r\n  }\r\n\r\n  const cancelEdit = () => {\r\n    setSelectedTask(\"\");\r\n  }\r\n\r\n  const handleOnDragEnd = (result) => {\r\n    if (!result.destination) return;\r\n    const items = [...tasks];\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n    setTasks(items);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Pekerjaan Rumah Yang Perlu Dilakukan</h1>\r\n      <input value={newTask} onChange={e => setNewTask(e.target.value)} placeholder=\"Pekerjaan rumah\" />\r\n      <button onClick={addTask} className=\"buttonTambah\">Tambah</button>\r\n      <TodoList tasks={tasks} editTask={editTask} deleteTask={deleteTask} selectedTask={selectedTask} cancelEdit={cancelEdit} confirmEdit={confirmEdit} editedItem={editedItem} setEditedItem={setEditedItem} handleOnDragEnd={handleOnDragEnd} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}